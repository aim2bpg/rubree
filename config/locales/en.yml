en:
  application:
    title: "Rubree - A Ruby regular expression editor inspired by Rubular"
    description: "Rubree is a Ruby regular expression editor inspired by Rubular. Quickly test and visualize your regex patterns in an intuitive interface."
    site_name: "Rubree"
  regular_expressions:
    header:
      subtitle: "Ruby regular expression editor"
      try_example: "Try this example"
      try_random: "Try a random example"
      examples: "Examples"
      open_examples: "Open examples (top-right)"
      button: "Regex Examples"

    form:
      your_regular_expression: "Your regular expression:"
      options: "Options:"
      your_test_string: "Your test string:"
      substitution: "Substitution:"

    results:
      railroad_diagram: "Railroad diagram:"
      railroad_diagram_placeholder: "Railroad diagram will appear here"
      view_full_diagram: "View full diagram"
      copy_diagram_png: "Copy diagram as PNG"
      close: "Close"
      copied: "Copied!"
      test_result_placeholder: 'Regexp test result will appear here'
      please_enter: 'Please enter a regular expression pattern and a test string.'
      match_result_label: 'Match result:'
      invalid_regex: 'Invalid regular expression.'
      no_matches: 'No matches.'
      match_groups: "Match groups:"
      match_number: "Match %{number}"
      substitution:
        label: "Substitution:"
        no_substitution: "No substitution was performed or no match was found."
      ruby_code_label: "Ruby code"
      show: "Show"
      hide: "Hide"
      copy_ruby_code: "Copy Ruby code"

    content:
      quick_reference: "Regex Quick Reference"
      examples_tab: "Regex Examples"

    reference:
      sections:
        character-classes-anchors:
          title: "Character classes and anchors"
          items:
            0: "A single character of: a, b, or c"
            1: "Any single character except: a, b, or c"
            2: "Any single character in the range a-z"
            3: "Any single character in the range a-z or A-Z"
            4: "Start of line"
            5: "End of line"
            6: "Start of string"
            7: "End of string"
        common-patterns:
          title: "Common patterns"
          items:
            0: "Any single character"
            1: "Any whitespace character"
            2: "Any non-whitespace character"
            3: "Any digit"
            4: "Any non-digit"
            5: "Any word character (letter, number, underscore)"
            6: "Any non-word character"
            7: "Any word boundary"
        groups-quantifiers:
          title: "Groups & Quantifiers"
          items:
            0: "Capture everything enclosed"
            1: "a or b"
            2: "Zero or one of a"
            3: "Zero or more of a"
            4: "One or more of a"
            5: "Exactly 3 of a"
            6: "3 or more of a"
            7: "Between 3 and 6 of a"
        options:
          options_label: "options:"
          i: "case insensitive"
          m: "make dot match newlines"
          x: "ignore whitespace in regex"

    categories:
      basic-operations:
        short: Basics
        description: 'Basic operations: Concatenation, Alternation, Repeat (no syntax
          sugar).'
        examples:
          0:
            description: 'Concatenation: Matches ''a'' + ''b'' + ''c'''
          1:
            description: 'Concatenation: Matches ''ab'' in the middle'
          2:
            description: 'Concatenation: ''a'' not followed by ''b'''
          3:
            description: 'Alternation: Matches one of ''a'', ''b'', or ''c'''
          4:
            description: 'Alternation: Matches either ''a'' or repeated ''b'''
          5:
            description: 'Alternation: Matches either ''a'' or repeated ''b'''
          6:
            description: 'Repeat: Matches one ''a'''
          7:
            description: 'Repeat: Matches multiple ''a'''
          8:
            description: 'Repeat: Matches zero ''a'''
          9:
            description: 'Concatenation + Alternation: Matches ''ab'' or ''cd'''
          10:
            description: 'Alternation + Repeat: Matches ''a'''
          11:
            description: 'Concatenation + Repeat: ''a*'' + ''b'' + ''c'''
      syntax-sugar:
        short: Sugar
        description: 'Common syntax sugar features: quantifiers, dot, character classes,
          escapes, anchors.'
        examples:
          0:
            description: 'Quantifier ''+'': one or more ''a'''
          1:
            description: 'Quantifier ''?'': optional ''a'''
          2:
            description: 'Quantifier ''{n,m}'': 2 to 4 ''a'''
          3:
            description: 'Dot ''.'': matches any one character'
          4:
            description: 'Character class: lowercase letter'
          5:
            description: 'Character class: hyphen in range'
          6:
            description: 'Negated class: not lowercase letter'
          7:
            description: 'Escape: tab character ''\t'''
          8:
            description: 'Anchor ''^'': start of string'
          9:
            description: 'Anchor ''$'': end of string'
          10:
            description: 'Anchor ''\b'': word boundary'
          11:
            description: 'Anchor ''\B'': not at word boundary'
      pattern-matching-examples:
        short: Patterns
        description: Named capture patterns with multiline input, including query
          and fragment for URL, and non-greedy capture for log and YAML lines.
        examples:
          0:
            description: Match email addresses with named captures local_part and
              domain_name
          1:
            description: Match valid URLs with scheme, host, optional path, query,
              fragment
          2:
            description: Match IPv4 addresses with named captures octet_one to octet_four
          3:
            description: Match email addresses with named captures local_part and
              domain_name
          4:
            description: Match valid URLs with scheme, host, optional path, query,
              fragment
          5:
            description: Match IPv4 addresses with named captures octet_one to octet_four
          6:
            description: Match IPv6 addresses with named captures block_one to block_eight
              or compressed_address
          7:
            description: Extract ERROR log entries with timestamp, level and message
              named captures
          8:
            description: Match 2-level nested YAML with 3 key-value pairs each under
              parent keys
      alternations:
        short: Alternations
        description: 'Alternations: Match one of several alternatives using the |
          operator.'
        examples:
          0:
            description: Matches 'cat' or 'dog'.
          1:
            description: Matches 'cat' or 'dog'.
          2:
            description: No match because neither 'cat' nor 'dog' is present.
          3:
            description: Matches any of the listed colors.
          4:
            description: No match since 'yellow' isn't an alternative.
      anchors:
        short: Anchors
        description: "Anchors: Match positions in the string using anchors like ^,
          $, A, \b."
        examples:
          0:
            description: Matches 'start' at the beginning.
          1:
            description: No match because 'start' isn't at the start.
          2:
            description: Matches 'end' at the end.
          3:
            description: No match because 'end' isn't at the end.
          4:
            description: Matches 'word' as a separate word.
          5:
            description: No match because 'hello' isn't isolated by word boundaries.
          6:
            description: Matches 'abc' at the start.
          7:
            description: No match because 'abc' isn't at the start.
          8:
            description: Matches 'xyz' because it's followed by a word boundary.
          9:
            description: Matches 'xyz' at a word boundary.
          10:
            description: Matches 'start' at the end of the string.
          11:
            description: Matches 'start' at the end of the string.
      character-classes:
        short: Character Classes
        description: 'Character Classes: Match specific sets of characters inside
          square brackets.'
        examples:
          0:
            description: Matches 'a', 'b', 'c' because they are in the character class
              [abc]. '1' doesn't match.
          1:
            description: Matches '1' because it's not in the character class [abc].
              'a', 'b', 'c' don't match.
          2:
            description: Matches '1', '2', '3' because they are digits in the range
              [0-9]. 'a', 'b', 'c' don't match.
          3:
            description: Matches 'a', 'b', 'c' because they are lowercase letters
              in the range [a-z]. '1', '2', '3' don't match.
          4:
            description: Matches 'X', 'Y', 'Z' because they are uppercase letters
              in the range [A-Z]. 'a', 'b', 'c', '1', '2', '3' don't match.
          5:
            description: Matches '\\' because it's excluded in the class [^\\]. All
              other characters match.
          6:
            description: Matches 'a' because it's in the range [a-d] and a vowel.
              'b', 'c', 'd' don't match.
          7:
            description: Matches 'b' because it's in the range [a-d] and not a vowel.
              'a', 'c', 'd' don't match.
          8:
            description: Matches 'a' because it's equivalent to 'e' and 'b' in the
              character class.
      character-types:
        short: Character Types
        description: 'Character Types: Match specific character types like digits,
          whitespaces, etc.'
        examples:
          0:
            description: Matches '1', '2', '3' because they are digits.
          1:
            description: No match because there are no digits in 'helloworld'.
          2:
            description: Matches all characters in 'hello world' because they are
              non-whitespace characters.
          3:
            description: Matches the space character between 'hello' and 'world'.
          4:
            description: Matches 'h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd'
              because they are non-space characters.
          5:
            description: Matches 'h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd',
              '1', '2', '3' because they are word characters.
          6:
            description: Matches 'h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd'
              because they are word characters. '@' doesn't match.
          7:
            description: Matches '@' because it's a non-word character.
          8:
            description: No match because all characters are word characters.
          9:
            description: No match because all characters are word characters.
      cluster-types:
        short: Cluster Types
        description: 'Cluster Types: Match grapheme clusters using R or X.'
        examples:
          0:
            description: Matches the newline character between 'abc' and '123'.
          1:
            description: Matches the carriage return between 'hello' and 'world'.
          2:
            description: "Matches the emoji '\\U0001F44B' as a single grapheme cluster."
          3:
            description: "Matches the whole string as a single grapheme cluster, including
              the emoji '\\U0001F44B'."
          4:
            description: Matches 'a' followed by an accent (combining character) as
              a single grapheme cluster.
          5:
            description: Example treating ligatures and combining characters as a single grapheme cluster (accented characters).
      conditional-expressions:
        short: Conditional Expressions
        description: 'Conditional Expressions: Match conditional patterns using (?(cond)yes-subexp|no-subexp).'
        examples:
          0:
            description: Matches 'T' because condition (<A>) is true.
          1:
            description: Matches 'T' because condition (<A>) is true and empty branch
              is ignored.
          2:
            description: Matches 'T' because condition (001) is valid.
          3:
            description: Matches 'set x=32' with group 1 being 'set', group 3 being
              'x', and group 4 being '32' because condition (1) is true.
          4:
            description: Matches 'print x' with group 2 being 'print' and group 3
              being 'x'. The condition (1) is false, so no number is matched.
          5:
            description: No match because 'set y' does not match the condition (1)
          6:
            description: No match because the condition is not satisfied (e.g., a non-digit where a number should follow).
      escape-sequences:
        short: Escape Sequences
        description: 'Escape Sequences: Match characters using escape sequences like
          	, \n, \d, etc.'
        examples:
          0:
            description: Matches the tab character.
          1:
            description: Matches the newline character.
          2:
            description: Matches a digit, here '5'.
          3:
            description: No match for 'a' because it's not a digit.
          4:
            description: Matches a whitespace character (space).
          5:
            description: Matches a non-whitespace character.
          6:
            description: Matches a word character, here 'a'.
          7:
            description: Matches a non-word character, here '$'.
          8:
            description: Matches the word boundary before 'word'.
          9:
            description: No match for 'word' because \B matches non-word boundaries.
          10:
            description: Matches the form feed character.
          11:
            description: Matches the carriage return character.
          12:
            description: Matches the null character.
          13:
            description: Matches the character 'A' using hexadecimal escape code.
          14:
            description: Matches one or more backslashes.
          15:
            description: Matches the literal question mark character.
          16:
            description: Example matching the question mark as a literal character.
      free-space:
        short: Free Space
        description: 'Free Space: Match whitespace and comments using the x modifier.'
        examples:
          0:
            description: Whitespace and comments are ignored, so 'a' and 'b' match.
          1:
            description: Whitespace and comment are ignored, so it matches 'ab'.
          2:
            description: Whitespace and comment are ignored, so it matches 'ab'.
          3:
            description: Whitespace and comment are ignored, so 'ab' is matched.
          4:
            description: Example where whitespace and comments are excluded, so 'ab' matches.
      group-assertions:
        short: Group Assertions
        description: 'Group assertions: Match positions without consuming characters
          using lookahead and lookbehind.'
        examples:
          0:
            description: Matches the position before 'abc'.
          1:
            description: Matches the position before the word 'hello' because it's
              a word boundary.
          2:
            description: Matches the position where 'abc' is not found.
          3:
            description: Matches the position after 'abc'.
          4:
            description: Matches the position after a sequence of three digits.
          5:
            description: Matches the position after the word boundary before 'hello'.
          6:
            description: Matches the position before 'abc'.
          7:
            description: Matches the position before 'abc' because it's not preceded
              by a digit.
          8:
            description: Matches the position before 'abc' because it's not preceded
              by two digits.
          9:
            description: Example matching just before 'abc' when not preceded by a two-digit number.
      group-atomic:
        short: Group Atomic
        description: 'Group Atomic: Atomic groups (?>...) match a subpattern without
          allowing backtracking within the group. If the overall match fails, the
          engine will not retry alternative paths inside the atomic group. This can
          reduce unnecessary backtracking and improve performance.'
        examples:
          0:
            description: 'Non-atomic: tries ''b'', fails, backtracks and matches ''bc'',
              then ''c''.'
          1:
            description: 'Atomic: matches ''bc''; ''c'' fails; no backtracking to
              ''b''.'
          2:
            description: Matches 'user123'; captures 'user' in group 1; '123' is matched
              but not captured separately.
          3:
            description: No match because the atomic group (?>\w+) greedily consumes
              'user123', leaving nothing for \d{3} to match.
          4:
            description: 'Non-atomic: tries ''A+'', fails; backtracks and tries ''A*B'',
              which matches.'
          5:
            description: 'Atomic: greedily matches ''A+''; fails at ''B''; cannot
              try ''A*B''.'
          6:
            description: 'Atomic: ''A+'' is matched greedily; on failure, ''A*B'' is not tried.'
      group-absence:
        short: Group Absence
        description: 'Group Absence: Absence operator (?~pattern) matches substrings
          that do NOT contain the pattern. When matching the entire string, it fails
          if the pattern exists anywhere. However, partial matches may occur on substrings
          excluding the pattern.'
        examples:
          0:
            description: Matches whole string; 'abc' is absent.
          1:
            description: Matches whole string; 'abc' is absent.
          2:
            description: Matches whole string; 'abc' is absent.
          3:
            description: Matches parts of the string that do not include 'abc' (e.g.,
              'ab', 'bc', or empty positions); full match is not possible.
          4:
            description: No match because the entire string contains 'abc', which
              is excluded by the absence group.
          5:
            description: Partial match found excluding 'abc'; full string contains
              'abc' so full match fails.
          6:
            description: Partial match on substrings excluding 'abc'; full string
              contains 'abc' so full match fails.
          7:
            description: Matches C-style empty comment.
          8:
            description: Matches C-style comment with content.
      group-back-references:
        short: Group Back-references
        description: 'Group Back-references: Match the same text as previously captured
          using back-references.'
        examples:
          0:
            description: Matches '11' because both digits are the same.
          1:
            description: Matches 'hello hello' using a named back-reference.
          2:
            description: Matches '123123' using a numbered back-reference.
          3:
            description: Matches 'hello hello' because both words are the same.
          4:
            description: Matches '123-45-6789123' using a nested back-reference to
              the first group.
          5:
            description: Matches 'apple-orangeorange' where the second group repeats
              using k<2>.
          6:
            description: Matches '123-45-678945' using a numbered back-reference to
              group 2.
          7:
            description: No match for '12345' because the digits don't repeat.
          8:
            description: Matches 'yzyz' where \k<-2> and \k<-1> refer to 2nd and 1st
              previous captures, respectively.
      group-capturing:
        short: Group Capturing
        description: 'Group Capturing: Capture matched groups for later reference,
          accessible via numbered or named groups, including local variables after
          matching.'
        examples:
          0:
            description: Captures 'abc' in the first capturing group.
          1:
            description: 'Captures the date parts into three groups: ''12'', ''34'',
              ''5678''.'
          2:
            description: Captures the username 'alice' and domain 'example.com' in
              two separate groups.
          3:
            description: Captures '123' in the first group and '456' in the second
              group.
          4:
            description: Captures 'abc' in the first group and 'def' in the second
              group.
          5:
            description: Captures '2021', '12', '25' in three separate groups.
          6:
            description: Captures 'hello' in the first group and 'world' in the second
              group.
          7:
            description: Captures 'hello' and matches it again using the same captured
              group.
      group-comments:
        short: Group Comments
        description: 'Group Comments: Include comments inside regular expressions
          using (?# comment ).'
        examples:
          0:
            description: Matches 'abc' while ignoring the comment.
          1:
            description: Matches 'ab', ignoring the comment inside the parentheses.
          2:
            description: Matches 'abc' at the start and end, while ignoring comments.
          3:
            description: Matches 'ab', ignoring comments in the middle.
          4:
            description: Matches one or more digits, ignoring the comment about digits.
          5:
            description: Matches a single space character while ignoring the comment.
          6:
            description: Matches 'word' because it's a word of 3 or more characters,
              ignoring the comment.
      group-named:
        short: Group Named
        description: 'Group Named: Capture groups with a specific name for easier
          reference.'
        examples:
          0:
            description: Captures 'abc' in a group named 'name'.
          1:
            description: Captures 'abc' in a group named 'name'.
          2:
            description: Python-style named group syntax '(?P<name>...)' is not supported
              in Ruby, so no match.
          3:
            description: Captures the year, month, and day into named groups.
          4:
            description: Captures hour and minute into named groups.
          5:
            description: Captures 'alice' in the named group 'alice' and 'example.com'
              in the named group 'domain'.
          6:
            description: Captures dollars and cents into named groups 'dollars' and
              'cents', accessible via MatchData with symbol keys.
          7:
            description: Uses named capture and back-references to match repeated
              vowels.
          8:
            description: Matches successfully; named capture 'name' and numbered capture
              both exist, but MatchData mainly exposes named captures.
      group-options:
        short: Group Options
        description: 'Group Options: Modify regex behavior using inline options like
          (?i), (?m), etc.'
        examples:
          0:
            description: Matches 'ABC' case-insensitively due to the (?i) option.
          1:
            description: Matches 'abc' at the start of each line due to the (?m) multiline
              option.
          2:
            description: Matches 'ab' while ignoring the space and comment due to
              the (?x) extended option.
          3:
            description: Matches 'HELLO' case-insensitively and 'world' case-sensitively
              due to inline options.
          4:
            description: Matches 'ABC' case-insensitively and 'def' case-sensitively.
          5:
            description: Matches 'start' at the beginning of each line due to the
              (?m) option.
          6:
            description: Matches 'ac' while ignoring the comment and spaces due to
              the (?x) option.
      group-passive:
        short: Group Passive
        description: 'Group Passive: Create a non-capturing group that doesn''t store
          matches.'
        examples:
          0:
            description: Non-capturing group for 'abc'.
          1:
            description: Non-capturing groups for the date pattern.
          2:
            description: Captures domain but ignores the username using passive group.
      group-subexpression-calls:
        short: Group Subexp. Calls
        description: 'Group Subexp. Calls: Call a previously defined subexpression
          (either by name or index).'
        examples:
          0:
            description: Refers to the first captured group.
          1:
            description: Refers to the group named 'name'.
          2:
            description: Refers to two captured groups by index.
      keep:
        short: Keep
        description: 'Keep: Keep the current match and resume matching after it using
          \K.'
        examples:
          0:
            description: Matches 'cd' after 'ab' is discarded using \K.
          1:
            description: Matches 'b' after 'a' is discarded using \K.
          2:
            description: Matches 'bar' after 'foo' is discarded using \K.
          3:
            description: Matches 'abc' after 'xyz' is discarded using \K.
          4:
            description: Matches 'end' after 'start' is discarded using \K.
          5:
            description: Matches 'two' after 'one' is discarded using \K.
          6:
            description: Matches 'bbb' after 'aaa' is discarded using \K.
          7:
            description: Matches '2' after '1' is discarded using \K.
          8:
            description: Matches 'xyz' after 'abc' is discarded using \K.
          9:
            description: Matches 'brown' after 'quick' is discarded using \K.
      literals:
        short: Literals
        description: 'Literals: Match specific literal characters including Unicode
          characters.'
        examples:
          0:
            description: Matches 'Ruby' exactly.
          1:
            description: Matches 'apple' exactly in 'apple pie'.
          2:
            description: Matches 'dog' exactly in 'doghouse'.
          3:
            description: Matches '123' exactly in '1234'.
          4:
            description: Matches 'abc' exactly in 'abcdef'.
          5:
            description: "Matches the exact emoji '\\U0001F603'."
          6:
            description: Matches the exact Japanese word 'ルビー'.
          7:
            description: Matches the exact Arabic word 'روبي'.
          8:
            description: No match for 'apple' because the word is attached to 'pie'.
          9:
            description: No match for 'dog' because the letters are in a different
              order.
          10:
            description: "Matches the exact emoji '\\U0001F30D'."
      posix-classes:
        short: POSIX Classes
        description: 'POSIX Classes: Match POSIX character classes like [:alpha:],
          [:digit:], etc. Can also use negation (e.g., [:^alpha:]) to match non-characters.'
        examples:
          0:
            description: Matches 'abc' and 'XYZ', skips digits.
          1:
            description: Matches digits '123', skips alphabetic chars.
          2:
            description: Matches digit sequences '123' and '45'.
          3:
            description: Matches punctuation '!?'.
          4:
            description: Matches spaces, tabs, and newlines.
          5:
            description: Matches lowercase 'b' only.
          6:
            description: Matches uppercase 'A' and 'C'.
      quantifiers-greedy:
        short: Quantifiers Greedy
        description: 'Greedy quantifiers: Match as many times as possible.'
        examples:
          0:
            description: Matches zero or more 'a's greedily; matches '' or 'a' at
              start.
          1:
            description: Matches all leading 'a's greedily.
          2:
            description: Matches one or more 'a's greedily; matches first 'a'.
          3:
            description: No match; requires exactly two 'a's.
          4:
            description: Matches zero or more 'abc's greedily; matches one 'abc'.
          5:
            description: Matches one or more 'abc's greedily.
          6:
            description: Matches zero or one 'abc' greedily.
          7:
            description: Matches exactly two 'abc' sequences greedily.
          8:
            description: Matches 2 to 3 'abc's greedily (matches 2).
          9:
            description: Matches 2 to 3 'abc's greedily (matches 3).
      quantifiers-reluctant-lazy:
        short: Quantifiers Reluctant (Lazy)
        description: 'Reluctant (Lazy) quantifiers: Match as few times as possible.                      Note:
          Railroad diagrams are rendered using the `regexp_parser` library.                      Ruby''s
          regular expression engine (Onigmo) supports lazy quantifiers like `??`,
          `*?`, `+?`, `{n,m}?`, `{n,}?`, `{,n}?` as specified,                      but
          some specific forms like `{n}?` are not supported and generally unnecessary
          because lazy behavior with exact counts is redundant.'
        examples:
          0:
            description: Matches zero or more 'a's lazily; prefers empty match.
          1:
            description: Matches zero 'a's lazily at start.
          2:
            description: Matches one or more 'a's lazily; matches one 'a'.
          3:
            description: 'No match; requires exactly two ''a''s. Not supported by
              Onigmo: `{n}?` lazy quantifier is unsupported and usually unnecessary.'
          4:
            description: Matches zero 'abc's lazily at start.
          5:
            description: Matches one 'abc' lazily.
          6:
            description: Matches zero or one 'abc' lazily.
          7:
            description: 'Matches exactly two ''abc'' sequences lazily. Diagram not
              rendered: `regexp_parser` does not support rendering lazy range quantifiers
              like `{2}?`.'
          8:
            description: 'Matches 2 ''abc''s lazily. Diagram not rendered: `regexp_parser`
              does not support rendering lazy range quantifiers like `{2,3}?`.'
          9:
            description: 'Matches 2 ''abc''s lazily; stops early. Diagram not rendered:
              `regexp_parser` does not support rendering lazy range quantifiers like
              `{2,3}?`.'
      quantifiers-possessive:
        short: Quantifiers Possessive
        description: 'Possessive quantifiers: Match as many times as possible without
          backtracking.                      Note: Railroad diagrams are rendered
          using the `regexp_parser` library.                      Possessive quantifiers
          using range syntax like `{n,m}+`, `{n,}+`, and `{n}+` are not supported
          by Ruby''s regular expression engine (Onigmo) by default.                      These
          are only supported in Onigmo when using specific syntaxes such as `ONIG_SYNTAX_JAVA`
          or `ONIG_SYNTAX_PERL`.'
        examples:
          0:
            description: Matches zero or more 'a's possessively; no backtracking.
          1:
            description: Matches all leading 'a's possessively.
          2:
            description: Matches one or more 'a's possessively.
          3:
            description: Matches zero or more 'abc's possessively.
          4:
            description: Matches one or more 'abc's possessively.
          5:
            description: Matches zero or one 'abc' possessively.
      string-escapes:
        short: String Escapes
        description: 'String Escapes: Match special characters using escape sequences
          like d, w,  , etc.'
        examples:
          0:
            description: Matches '1' because \d matches any digit.
          1:
            description: No match because there is no digit at the beginning.
          2:
            description: Matches 'a' because \w matches a word character.
          3:
            description: Matches '1' because \w matches a word character (digit).
          4:
            description: Matches '!' because \W matches non-word characters.
          5:
            description: Matches ' ' (space) because \s matches any whitespace character.
          6:
            description: Matches 'a' because \S matches any non-whitespace character.
          7:
            description: Matches the boundary between 'hello' and 'world'.
          8:
            description: Matches 'b' because \B matches a non-word boundary between
              'a' and 'b'.
          9:
            description: Matches '\\x20' (hexadecimal code for space).
          10:
            description: "Matches the emoji '\\U0001F60D' using Unicode escape sequence."
      unicode-age:
        short: Unicode Age
        description: Match characters by Unicode version (Age). Supports \p{Age},
          \P{Age}, and caret negation.
        examples:
          0:
            description: "Match emoji \U0001F929 from Age 5.2, stops before star '☆'"
          1:
            description: Match chars not in Age 6.1, stops before emoji
          2:
            description: Match punctuation from Age 3.0, stops before 'D'
          3:
            description: "Matches 'ABC', stops before Age 5.2 emoji \U0001F929"
          4:
            description: Matches musical symbol (Age 7.0), stops before 'C'
          5:
            description: "Matches 'abc', stops before Age 8.0 compass emoji \U0001F9ED"
      unicode-blocks:
        short: Unicode Blocks
        description: Match by Unicode block. Use \p{In…}, \P{In…}, or caret negation.
        examples:
          0:
            description: Match Katakana chars, stops before Hiragana 'あ'
          1:
            description: Match Armenian letters, stops before Latin 'abc'
          2:
            description: Match non-Thai chars 'Hello', stops before Thai
          3:
            description: Match chars not in Khmer, stops at Khmer char
          4:
            description: Match Cyrillic letters, stops before Latin 'X'
          5:
            description: Match non-Hebrew chars, stops before Hebrew letters
      unicode-classes:
        short: Unicode Classes
        description: Binary and negated properties like Alpha, Space, Alnum.
        examples:
          0:
            description: Match alphabetic letters, stops before digit
          1:
            description: Match non-space chars 'Az', stops before space
          2:
            description: Match chars not alphanumeric, stops before letters/digits
          3:
            description: Match digits only, stops before letter
          4:
            description: Match non-alphabetic chars, stops before 'A'
          5:
            description: Match spaces only, stops before 'b'
      unicode-derived:
        short: Unicode Derived
        description: Derived properties such as Math, Lowercase, Cased.
        examples:
          0:
            description: Match math symbols, stops before space
          1:
            description: Match non-lowercase, stops before 'd'
          2:
            description: Match non-cased chars, stops before 'a'
          3:
            description: Match lowercase letters, stops before uppercase
          4:
            description: Match non-math chars, stops before math symbols
          5:
            description: Match alphabetic chars, stops before digit
      unicode-general-categories:
        short: Unicode General Categories
        description: Categories like Lu, Cs, and negated script (sc).
        examples:
          0:
            description: Uppercase abbreviation 'LU' matches uppercase letters
          1:
            description: Lowercase abbreviation 'lu' matches uppercase letters
          2:
            description: Full property name with space matches uppercase letters
          3:
            description: Full property name with underscore matches uppercase letters
          4:
            description: Full property name with hyphen and uppercase letters matches
              uppercase letters
          5:
            description: Match non-uppercase, stops before uppercase
          6:
            description: Match chars without script, stops before Greek
          7:
            description: Match control characters, stops before 'A'
          8:
            description: Match format characters, stops before 'A'
      unicode-scripts:
        short: Unicode Scripts
        description: Script property match, with negation.
        examples:
          0:
            description: Match Arabic script, stops before Latin text
          1:
            description: Match non-Hiragana chars, stops before Hiragana
          2:
            description: Match non-Greek chars, stops before Greek
          3:
            description: Match Katakana script, stops before Latin
          4:
            description: Match Cyrillic script, stops before Latin
          5:
            description: Match non-Devanagari chars, stops before Devanagari
      unicode-simple-props:
        short: Unicode Simple Props
        description: Simple binary properties like Dash, Extender, and negation.
        examples:
          0:
            description: Match dash characters, stops before 'A'
          1:
            description: Matches extender letter ː, stops before 'X'
          2:
            description: Match chars except hyphen, stops at hyphen
          3:
            description: Match non-dash chars, stops before dash
          4:
            description: Match hyphen char, stops before 'B'
          5:
            description: Matches emoji family, stops before 'abc'
      posix-classes-vs-unicode-properties:
        short: POSIX vs Unicode
        description: Compare POSIX character classes and Unicode property constructs
          with clear match boundaries.
        examples:
          0:
            description: 'POSIX alpha: matches ''abc'' and ''XYZ'', skips ''123'''
          1:
            description: 'Unicode Alpha: matches ''abc'' and ''XYZ'', skips ''123'''
          2:
            description: 'POSIX negated alpha: matches ''123'', skips letters'
          3:
            description: 'Unicode non-Alpha: matches ''123'', skips alphabetic'
          4:
            description: 'POSIX digit: matches ''123'' and ''45'''
          5:
            description: 'Unicode Digit: matches ''123'' and ''45'''
          6:
            description: 'POSIX punct: matches ''!?'''
          7:
            description: 'Unicode Punct: matches ''!?'' (punctuation)'
          8:
            description: 'POSIX space: matches space, tab, newline'
          9:
            description: 'Unicode Space: matches space, tab, newline'
          10:
            description: 'POSIX lower: matches ''b'''
          11:
            description: 'Unicode Lower: matches ''b'''
          12:
            description: 'POSIX upper: matches ''A'' and ''C'''
          13:
            description: 'Unicode Upper: matches ''A'' and ''C'''
    footer:
      inspired_by: "Inspired by Michael Lovitt's excellent"
      rubree_uses_ruby: "Rubree uses Ruby %{version}."
      issues_text: "Issues"
      issues_handle: "@rubree"
      made_by: "Made by %{name}"
      made_by_handle: "@aim2bpg"
